// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/01/2020 23:53:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          audio_modulator_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module audio_modulator_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] enemyDead;
reg playerDead;
reg resetN;
reg shotFired;
reg slowClk;
// wires                                               
wire request_time;
wire [3:0] sound_key;
wire [3:0] time_amount;

// assign statements (if any)                          
audio_modulator_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enemyDead(enemyDead),
	.playerDead(playerDead),
	.request_time(request_time),
	.resetN(resetN),
	.shotFired(shotFired),
	.slowClk(slowClk),
	.sound_key(sound_key),
	.time_amount(time_amount)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// enemyDead[ 2 ]
initial
begin
	enemyDead[2] = 1'b0;
end 
// enemyDead[ 1 ]
initial
begin
	enemyDead[1] = 1'b0;
end 
// enemyDead[ 0 ]
initial
begin
	enemyDead[0] = 1'b0;
end 

// playerDead
initial
begin
	playerDead = 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #32000 1'b1;
end 

// shotFired
initial
begin
	shotFired = 1'b0;
	shotFired = #32000 1'b1;
	shotFired = #2000 1'b0;
end 

// slowClk
initial
begin
	slowClk = 1'b0;
	slowClk = #38000 1'b1;
	slowClk = #2000 1'b0;
	slowClk = #4000 1'b1;
	slowClk = #2000 1'b0;
	slowClk = #4000 1'b1;
	slowClk = #2000 1'b0;
end 
endmodule

