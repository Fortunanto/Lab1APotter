// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2020 16:57:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          scoreManager
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module scoreManager_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] amountToAdd;
reg clk;
reg enableAdd;
reg resetN;
// wires                                               
wire [15:0] score;

// assign statements (if any)                          
scoreManager i1 (
// port map - connection between master ports and signals/registers   
	.amountToAdd(amountToAdd),
	.clk(clk),
	.enableAdd(enableAdd),
	.resetN(resetN),
	.score(score)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// amountToAdd[ 15 ]
initial
begin
	amountToAdd[15] = 1'b0;
	amountToAdd[15] = #350000 1'b1;
	amountToAdd[15] = #360000 1'b0;
end 
// amountToAdd[ 14 ]
initial
begin
	amountToAdd[14] = 1'b0;
	amountToAdd[14] = #350000 1'b1;
	amountToAdd[14] = #360000 1'b0;
end 
// amountToAdd[ 13 ]
initial
begin
	amountToAdd[13] = 1'b0;
	amountToAdd[13] = #350000 1'b1;
	amountToAdd[13] = #360000 1'b0;
end 
// amountToAdd[ 12 ]
initial
begin
	amountToAdd[12] = 1'b0;
	amountToAdd[12] = #350000 1'b1;
	amountToAdd[12] = #360000 1'b0;
end 
// amountToAdd[ 11 ]
initial
begin
	amountToAdd[11] = 1'b0;
	amountToAdd[11] = #350000 1'b1;
	amountToAdd[11] = #360000 1'b0;
end 
// amountToAdd[ 10 ]
initial
begin
	amountToAdd[10] = 1'b0;
	amountToAdd[10] = #350000 1'b1;
	amountToAdd[10] = #360000 1'b0;
end 
// amountToAdd[ 9 ]
initial
begin
	amountToAdd[9] = 1'b0;
	amountToAdd[9] = #350000 1'b1;
	amountToAdd[9] = #360000 1'b0;
end 
// amountToAdd[ 8 ]
initial
begin
	amountToAdd[8] = 1'b0;
	amountToAdd[8] = #350000 1'b1;
	amountToAdd[8] = #360000 1'b0;
end 
// amountToAdd[ 7 ]
initial
begin
	amountToAdd[7] = 1'b0;
	amountToAdd[7] = #350000 1'b1;
	amountToAdd[7] = #360000 1'b0;
end 
// amountToAdd[ 6 ]
initial
begin
	amountToAdd[6] = 1'b1;
end 
// amountToAdd[ 5 ]
initial
begin
	amountToAdd[5] = 1'b0;
	amountToAdd[5] = #350000 1'b1;
	amountToAdd[5] = #360000 1'b0;
end 
// amountToAdd[ 4 ]
initial
begin
	amountToAdd[4] = 1'b1;
end 
// amountToAdd[ 3 ]
initial
begin
	amountToAdd[3] = 1'b1;
end 
// amountToAdd[ 2 ]
initial
begin
	amountToAdd[2] = 1'b0;
end 
// amountToAdd[ 1 ]
initial
begin
	amountToAdd[1] = 1'b0;
	amountToAdd[1] = #350000 1'b1;
	amountToAdd[1] = #360000 1'b0;
end 
// amountToAdd[ 0 ]
initial
begin
	amountToAdd[0] = 1'b0;
end 

// resetN
initial
begin
	resetN = 1'b1;
	resetN = #780000 1'b0;
	resetN = #20000 1'b1;
end 

// enableAdd
initial
begin
	enableAdd = 1'b0;
	enableAdd = #230000 1'b1;
	enableAdd = #40000 1'b0;
	enableAdd = #220000 1'b1;
	enableAdd = #90000 1'b0;
end 
endmodule

