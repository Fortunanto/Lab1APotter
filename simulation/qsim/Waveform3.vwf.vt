// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/03/2020 23:48:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          enemies_moveCollision
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module enemies_moveCollision_vlg_vec_tst();
// constants                                           
// general purpose registers
reg changeDirection;
reg clk;
reg dodgeBullet;
reg pause;
reg resetN;
reg [2:0] shotCollision;
reg startOfFrame;
// wires                                               
wire [10:0] topLeftX;
wire [10:0] topLeftY;

// assign statements (if any)                          
enemies_moveCollision i1 (
// port map - connection between master ports and signals/registers   
	.changeDirection(changeDirection),
	.clk(clk),
	.dodgeBullet(dodgeBullet),
	.pause(pause),
	.resetN(resetN),
	.shotCollision(shotCollision),
	.startOfFrame(startOfFrame),
	.topLeftX(topLeftX),
	.topLeftY(topLeftY)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// startOfFrame
always
begin
	startOfFrame = 1'b0;
	startOfFrame = #45000 1'b1;
	#5000;
end 

// resetN
initial
begin
	resetN = 1'b1;
	resetN = #20000 1'b0;
	resetN = #10000 1'b1;
	resetN = #140000 1'b0;
	resetN = #10000 1'b1;
	resetN = #240000 1'b0;
	resetN = #20000 1'b1;
	resetN = #130000 1'b0;
	resetN = #30000 1'b1;
end 

// dodgeBullet
initial
begin
	dodgeBullet = 1'b0;
end 

// changeDirection
initial
begin
	changeDirection = 1'b0;
end 
// shotCollision[ 2 ]
initial
begin
	shotCollision[2] = 1'b0;
end 
// shotCollision[ 1 ]
initial
begin
	shotCollision[1] = 1'b0;
	shotCollision[1] = #310000 1'b1;
	shotCollision[1] = #10000 1'b0;
	shotCollision[1] = #150000 1'b1;
	shotCollision[1] = #10000 1'b0;
end 
// shotCollision[ 0 ]
initial
begin
	shotCollision[0] = 1'b0;
	shotCollision[0] = #90000 1'b1;
	shotCollision[0] = #10000 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
end 
endmodule

