// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/30/2020 18:22:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enemyDead;
reg playerDead;
reg resetN;
reg startGame;
// wires                                               
wire [2:0] currentGameState;
wire pause;
wire startScreen;
wire [3:0] tree_count;

// assign statements (if any)                          
game_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.currentGameState(currentGameState),
	.enemyDead(enemyDead),
	.pause(pause),
	.playerDead(playerDead),
	.resetN(resetN),
	.startGame(startGame),
	.startScreen(startScreen),
	.tree_count(tree_count)
);
initial 
begin 
#1000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #5000 1'b1;
end 

// startGame
initial
begin
	startGame = 1'b0;
	startGame = #5000 1'b1;
	startGame = #7000 1'b0;
end 

// enemyDead
initial
begin
	enemyDead = 1'b0;
	enemyDead = #18000 1'b1;
	enemyDead = #2000 1'b0;
	enemyDead = #8000 1'b1;
	enemyDead = #2000 1'b0;
	enemyDead = #4000 1'b1;
	enemyDead = #2000 1'b0;
	enemyDead = #8000 1'b1;
	enemyDead = #2000 1'b0;
end 

// playerDead
initial
begin
	playerDead = 1'b0;
	playerDead = #62000 1'b1;
	playerDead = #2000 1'b0;
end 
endmodule

