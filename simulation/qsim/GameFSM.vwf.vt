// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/07/2020 15:10:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          game_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg playerDead;
reg playerTrigger;
reg resetN;
reg [2:0] shotEnemyCollision;
reg slowClk;
// wires                                               
wire [10:0] curEnemySpeed;
wire [2:0] currentGameState;
wire death_screen;
wire newLevel;
wire pause;
wire requestTime;
wire [10:0] slowClkRequest;
wire start_screen;
wire [3:0] tree_count;

// assign statements (if any)                          
game_fsm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.curEnemySpeed(curEnemySpeed),
	.currentGameState(currentGameState),
	.death_screen(death_screen),
	.newLevel(newLevel),
	.pause(pause),
	.playerDead(playerDead),
	.playerTrigger(playerTrigger),
	.requestTime(requestTime),
	.resetN(resetN),
	.shotEnemyCollision(shotEnemyCollision),
	.slowClk(slowClk),
	.slowClkRequest(slowClkRequest),
	.start_screen(start_screen),
	.tree_count(tree_count)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #24000 1'b1;
end 
// shotEnemyCollision[ 2 ]
initial
begin
	shotEnemyCollision[2] = 1'b0;
	shotEnemyCollision[2] = #142000 1'b1;
	shotEnemyCollision[2] = #2000 1'b0;
	shotEnemyCollision[2] = #100000 1'b1;
	shotEnemyCollision[2] = #2000 1'b0;
end 
// shotEnemyCollision[ 1 ]
initial
begin
	shotEnemyCollision[1] = 1'b0;
end 
// shotEnemyCollision[ 0 ]
initial
begin
	shotEnemyCollision[0] = 1'b0;
	shotEnemyCollision[0] = #162000 1'b1;
	shotEnemyCollision[0] = #2000 1'b0;
	shotEnemyCollision[0] = #102000 1'b1;
	shotEnemyCollision[0] = #2000 1'b0;
end 

// playerDead
initial
begin
	playerDead = 1'b0;
	playerDead = #392000 1'b1;
	playerDead = #2000 1'b0;
end 

// slowClk
initial
begin
	slowClk = 1'b0;
	slowClk = #188000 1'b1;
	slowClk = #2000 1'b0;
end 

// playerTrigger
initial
begin
	playerTrigger = 1'b0;
	playerTrigger = #30000 1'b1;
	playerTrigger = #2000 1'b0;
	playerTrigger = #278000 1'b1;
	playerTrigger = #2000 1'b0;
	playerTrigger = #122000 1'b1;
	playerTrigger = #2000 1'b0;
end 
endmodule

