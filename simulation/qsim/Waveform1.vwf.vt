// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/28/2020 14:07:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shot_StockManager
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shot_StockManager_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] collisions;
reg [2:0] enable;
reg resetN;
reg trigger;
// wires                                               
wire nonAvailable;
wire triggerA;
wire triggerB;
wire triggerC;

// assign statements (if any)                          
shot_StockManager i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.collisions(collisions),
	.enable(enable),
	.nonAvailable(nonAvailable),
	.resetN(resetN),
	.trigger(trigger),
	.triggerA(triggerA),
	.triggerB(triggerB),
	.triggerC(triggerC)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// collisions[ 2 ]
initial
begin
	collisions[2] = 1'b0;
end 
// collisions[ 1 ]
initial
begin
	collisions[1] = 1'b0;
end 
// collisions[ 0 ]
initial
begin
	collisions[0] = 1'b0;
end 
// enable[ 2 ]
initial
begin
	repeat(12)
	begin
		enable[2] = 1'b0;
		enable[2] = #40000 1'b1;
		# 40000;
	end
	enable[2] = 1'b0;
end 
// enable[ 1 ]
always
begin
	enable[1] = 1'b0;
	enable[1] = #20000 1'b1;
	#20000;
end 
// enable[ 0 ]
always
begin
	enable[0] = 1'b0;
	enable[0] = #10000 1'b1;
	#10000;
end 

// resetN
initial
begin
	resetN = 1'b0;
	resetN = #2000 1'b1;
end 

// trigger
always
begin
	trigger = 1'b0;
	trigger = #5000 1'b1;
	#5000;
end 
endmodule

